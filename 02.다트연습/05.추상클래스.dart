/****************************************** 
 [다트 추상클래스]
 -> 형식을 강제할때 사용하는 클래스 생성방법
 -> 일반 상속과 달리 추상클래스는 모든 속성과
 메서드를 다 구현해야함!
 * 사용법:
 * abstract 키워드로 클래스를 선언한다->추상클래스
 * abstract는 추상화한...라는 뜻
 * 
  abstract class 추상클래스명{
    구현부
  }
 
 * 추상클래스를 상속 받는 것처럼 연결하는 방법은
 * implements 키워드로 연결한다!
 * implement는 시행하다...라는 뜻!
 * -> 추상클래스에 정의된 모든 속성과 메서드를 구현해야함!
 
 class 클래스명 implements 추상클래스명 {
    구현부
 }
******************************************/

// 추상클래스 연습 : 사람클래스를 추상클래스로 만들기
// -> 특정인물 클래스에서 사람클래스를 받아서 구현함!

abstract class Saram{
  // 생성자
  Saram(this.name);

  // 속성과 메서드 설계하기
  // ->>> 추상클래스 메서드는 
  // 구체적으로 구현하지 않는다! -> 해당클래스에서 구현
  // -> 그러나 대체적인 틀을 잡을 수 있음

  // 1. 이름속성
  final String name;
  // 2. 성별메서드
  String gender();
  // 3. 나이메서드
  String age();
  // 4. 먹다메서드 : 내용틀잡기
  String eat() => '$name씨는 지금 아무것도 안먹는다!';
  // 람다식 앞에 함수일 경우 Function키워드가 없다!

  // 5. 말하다메서드 : 내용틀잡기
  String say() => '$name씨는 지금 아무말도 안한다!';
} 


// 추상클래스를 상속(implements)받아 사용하기!
// -> 오버라이드 필수!(재정의를 반드시 해야함!)
// 도경수 배우의 클래스
class KyungSu implements Saram {
  @override
  String get name => '도경수';
  // get 키워드는 겟터를 사용하는 변수를 선언함

  @override
  String gender() => '$name씨는 남자다!';

  @override
  String age() => '$name씨의 나이는 30살이다!';

  @override
  String eat() => '$name씨는 피자를 먹는다!';

  @override
  String say() => '$name씨는 무엇인가 말하고 있다!';

} //////////// KyungSu 클래스 /////////////

/************************************************* 
 * [ 다트의 오버라이드(override) ]
 * - 기존의 정의된 속성과 메서드를 재정의 하는 것이다!
 * (그래서 위에 올라탄다는 단어를 쓰는 것임!)
 * -> 오버라이드 할때 어노테이션(주석)을 써준다!
 * @override : 오버라이드 표시역할 및 처리도움!
 * 
 * 참고: 다트에는 오버로드(overload)가 없다!
 * - 오버로드는 같은 이름의 메서드의 파라미터만 그 개수가
 * 다르게 여러게 만들수 있는 것으로 말함!

*************************************************/
